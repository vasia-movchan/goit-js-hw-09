{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,SAASE,SAASC,MACrDC,UAAWL,SAASC,cAAc,SAASE,SAASG,KACpDC,OAAQP,SAASC,cAAc,SAASE,SAASI,OACjDC,UAAWR,SAASC,cAAc,WAkCpC,SAASQ,EAAcC,EAAUN,GAC/B,IAAMO,EAAgBC,KAAKC,SAAW,GAWtC,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAAEL,SAAAA,EAAUN,MAAAA,IAEpBY,EAAO,CAAEN,SAAAA,EAAUN,MAAAA,MAEpBA,MAxCPN,EAAKC,KAAKmB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAIR,WAME,IALA,IAAMb,EAASc,OAAOvB,EAAKS,OAAOe,OAC5BjB,EAAYgB,OAAOvB,EAAKO,UAAUiB,OAEpCC,EADeF,OAAOvB,EAAKI,WAAWoB,OAGjCE,EAAW,EAAGA,GAAYjB,EAAQiB,GAAY,EACrDf,EAAce,EAAUD,GACrBE,MAAK,SAAAC,OAAGhB,EAAQgB,EAARhB,SAAUN,EAAKsB,EAALtB,MACjBuB,EAAA/B,GAASgC,OAAOC,QAAS,qBAAmCC,OAAfpB,EAAS,QAAYoB,OAAN1B,EAAM,MAAK,CACrE2B,QAAS,SAIZC,OAAM,SAAAN,OAAGhB,EAAQgB,EAARhB,SAAUN,EAAKsB,EAALtB,MAClBuB,EAAA/B,GAASgC,OAAOK,QAAS,oBAAkCH,OAAfpB,EAAS,QAAYoB,OAAN1B,EAAM,MAAK,CACpE2B,QAAS,SAIfR,GAASlB,EAvBX6B","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst refs = {\n  form: document.querySelector(\".form\"),\n  firstDelay: document.querySelector(\".form\").elements.delay,\n  stepDelay: document.querySelector(\".form\").elements.step,\n  amount: document.querySelector(\".form\").elements.amount,\n  submitBtn: document.querySelector(\"button\"),\n};\n\nrefs.form.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  createPromises();\n}\n\nfunction createPromises() {\n  const amount = Number(refs.amount.value);\n  const stepDelay = Number(refs.stepDelay.value);\n  const firstDelay = Number(refs.firstDelay.value);\n  let delay = firstDelay;\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n        });\n        // console.log(`âœ… Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n        });\n      });\n\n    delay += stepDelay;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstDelay","elements","delay","stepDelay","step","amount","submitBtn","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","Number","value","delay1","position1","then","param","$parcel$interopDefault","Notify","success","concat","timeout","catch","failure","$ce04d3a99e08e73b$var$createPromises"],"version":3,"file":"03-promises.c2990dac.js.map"}